from time import perf_counter  
import scipy as sp  
import scipy.linalg as spLinalg  
import numpy as np  
from numpy import float32, zeros  
import matplotlib.pyplot as plt  
  
def laplaciano(N, dtype=float32):  
    matriz = zeros((N,N), dtype = dtype)  
    for i in range(N):  
        for j in range(N):  
            if i==j:  
                matriz[i,j] = 2  
            if i+1==j:  
                matriz[i,j] = -1  
            if i-1==j:  
                matriz[i,j] = -1  
    return(matriz)  
  
#Tamaños matrices   
Ns = [2,5,10,12,15,20,30,40,45,50,55,60,75,100,125,160,200,250,350,500,600,800,1000]  
  
Ncorridas = 10  
  
names = ["A_invB_inv.txt", "A_invB_npSolve.txt"]  
  
files = [open(name, "w") for name in names]  
  
for N in Ns:  
    dts = np.zeros((Ncorridas, len(files)))  
    print (f"N = {N}")  
      
    for i in range(Ncorridas):  
        print(f"i = {i}")  
          
        #Invirtieno y multiplicando  
        A = laplaciano(N)  
        B = np.ones(N)  
        t1 = perf_counter()  
        A_inv = np.linalg.inv(A)  
        A_invB = A_inv@B  
        t2 = perf_counter()  
        dt = t2 - t1  
        dts[i][0] = dt  
          
          
        #Ocupando np.linalg.solve(A, B)  
        A = laplaciano(N)  
        B = np.ones(N)  
        t1 = perf_counter()  
        A_invB = np.linalg.solve(A, B)  
        t2 = perf_counter()  
        dt = t2 - t1  
        dts[i][1] = dt  
          
    print("dts: ", dts)  
      
    dts_mean = [np.mean(dts[:,j]) for j in range(len(files))]  
      
    print("dts_mean: ", dts_mean)  
      
    #Escribo en el archivo de texto los resultados  
    for j in range(len(files)):  
        files[j].write(f"{N} {dts_mean[j]}\n")  
        files[j].flush()  
[file.close() for file in files]  
  
     
def plotting(names):  
      
    xtks = [10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000]  
      
    ytks1 = [0.1e-3, 1e-3, 1e-2, 0.1, 1., 10., 60, 60 * 10]  
    ytklabs1 = ["0.1 ms","1 ms","10 ms","0.1 s","1 s","10 s","1 min","10 min"]  
      
    plt.figure()  
      
      
    for name in names:  
        data = np.loadtxt(name)  
        Ns = data[:, 0]  
        dts = data[:, 1]  
          
        print("Ns: ", Ns)  
        print("dts: ", dts)  
          
        plt.loglog(Ns, dts.T, "-o", label=name)  
        plt.ylabel("Tiempo transcurrido (s)")  
        plt.xlabel("Tamaño matriz $N$")  
        plt.grid(True)  
        plt.xticks(xtks,xtks,rotation=45)  
        plt.yticks(ytks1,ytklabs1)  
          
    plt.tight_layout()  
    plt.legend()  
    plt.show()  
    plt.savefig("plot.png")  
      
names = ["A_invB_inv.txt", "A_invB_npSolve.txt"]  
plotting(names)  
